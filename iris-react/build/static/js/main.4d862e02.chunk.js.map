{"version":3,"sources":["IrisDashboard.js","serviceWorker.js","index.js"],"names":["Header","Layout","Content","Sider","AXES","SPECIES","IrisDashboard","onCollapse","collapsed","console","log","_this","setState","state","filters","reduce","acc","axis","min","max","visible","insertData","showDrawer","onClose","isNumber","val","test","success","info","message","updateError","error","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","fieldsValue","sepalLength","sepalWidth","petalLength","petalWidth","newData","petal length","petal width","selected","sepal length","sepal width","species","concat","Object","toConsumableArray","resetField","resetFields","resetData","_this2","this","getFieldDecorator","_this$state","data","Iris","map","d","unselected","some","key","filter","objectSpread","forEach","item","drawer","react_default","a","createElement","es_drawer","title","width","es_form","layout","hideRequiredMark","row","Item","label","rules","required","input","placeholder","style","position","left","bottom","borderTop","padding","background","textAlign","es_button","onClick","marginRight","type","minHeight","collapsible","className","menu","theme","defaultSelectedKeys","mode","icon","yAxis","gutter","xAxis","updateFilter","area","right","top","col","span","es","height","x","Number","y","color","colorType","colorDomain","colorRange","getOpacity","size","fontSize","drag","onBrush","onDrag","onBrushEnd","display","React","Component","toForm","Form","create","Boolean","window","location","hostname","match","ReactDOM","render","src_IrisDashboard","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d862e02.chunk.js","sourcesContent":["/**\n * Created by evanli on 01/04/2019.\n */\nimport React from 'react';\nimport {\n    XAxis,\n    YAxis,\n    XYPlot,\n    MarkSeriesCanvas,\n    Highlight\n} from 'react-vis';\n\nimport {\n    Row, Col, Layout, Menu, Icon,Drawer, Form, Button, Input, Select,message\n} from 'antd';\n\n\nimport Iris from './iris.json';\n\nimport './iris-dashboard.css';\n\nconst {\n    Header, Content, Sider,\n} = Layout;\n\nconst AXES = [\n    'sepal length',\n    'sepal width',\n    'petal length',\n    'petal width'\n];\n\nconst SPECIES = ['setosa', 'versicolor', 'virginica','variable'];\n\nconst SIZE = 230;\n\nclass IrisDashboard extends React.Component {\n\n    onCollapse = (collapsed) => {\n        console.log(collapsed);\n        this.setState({ collapsed });\n    };\n\n    state = {\n        filters: AXES.reduce((acc, axis) => {\n            acc[axis] = {min: null, max: null};\n            return acc;\n        }, {}),\n\n        collapsed: false,\n        visible: false,\n        insertData: []\n    };\n\n    showDrawer = () => {\n        this.setState({\n            visible: true,\n        });\n    };\n\n    onClose = () => {\n        this.setState({\n            visible: false,\n        });\n    };\n\n    isNumber = (val)=> {\n    const regPos = /^\\d+(\\.\\d+)?$/;\n    const regNeg = /^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$/;\n    if(regPos.test(val) || regNeg.test(val)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n    success = (info) => {\n    message.success(info + ' Success');\n    };\n\n    updateError = () => {\n    message.error('Updated Failed');\n};\n\n    handleSubmit=(e)=>{\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err,fieldsValue)=>{\n            if (err) {\n                return;\n            }\n\n            const {sepalLength,sepalWidth,petalLength,petalWidth} = fieldsValue;\n            if(this.isNumber(sepalLength) && this.isNumber(sepalWidth) && this.isNumber(petalLength) && this.isNumber(petalWidth)){\n                const newData = {'petal length': petalLength, 'petal width': petalWidth, 'selected': true, 'sepal length': sepalLength, 'sepal width': sepalWidth, 'species': \"variable\"}\n                this.setState({insertData:[...this.state.insertData,newData]}, ()=>{\n                    this.success('Updated');\n                    this.onClose();\n                    this.resetField();\n                })\n            }else{\n                this.updateError();\n            }\n        })\n    };\n\n    resetField = ()=> {\n        this.props.form.resetFields();\n    };\n\n    resetData = () => {\n        this.setState({insertData: []},()=>{\n            this.success('Reset');\n        });\n    };\n\n    render() {\n\n        const { getFieldDecorator } = this.props.form;\n\n        const {filters,insertData} = this.state;\n\n        let data = Iris.map(d => {\n            const unselected = AXES.some(key => {\n                const filter = filters[key];\n                return (filter.min !== filter.max) && (filter.min > d[key] || filter.max < d[key]);\n            });\n            return {...d, selected: !unselected};\n        });\n        if(insertData!==[]){\n            insertData.forEach((item)=>{\n                data = [...data,item];\n            })\n        }\n        console.log(data);\n\n\n        const drawer = <Drawer\n            title=\"Insert\"\n            width={260}\n            onClose={this.onClose}\n            visible={this.state.visible}\n        >\n            <Form layout=\"vertical\" hideRequiredMark>\n                <Row>\n                    <Form.Item label=\"Sepal Length\">\n                        {getFieldDecorator('sepalLength', {\n                            rules: [{ required: true, message: 'Please input sepal length' }],\n                        })(<Input placeholder=\"Please input sepal length\" />)}\n                    </Form.Item>\n                </Row>\n                <Row>\n                    <Form.Item label=\"Sepal Width\">\n                        {getFieldDecorator('sepalWidth', {\n                            rules: [{ required: true, message: 'Please input sepal width' }],\n                        })(\n                            <Input placeholder=\"Please input sepal width\" />\n                        )}\n                    </Form.Item>\n                </Row>\n                <Row>\n                    <Form.Item label=\"Petal Length\">\n                        {getFieldDecorator('petalLength', {\n                            rules: [{ required: true, message: 'Please input petal length' }],\n                        })(\n                            <Input placeholder=\"Please input petal length\" />\n                        )}\n                    </Form.Item>\n                </Row>\n                <Row>\n                    <Form.Item label=\"Petal Width\">\n                        {getFieldDecorator('petalWidth', {\n                            rules: [{ required: true, message: 'Please input petal width' }],\n                        })(\n                            <Input placeholder=\"Please input petal width\" />\n                        )}\n                    </Form.Item>\n                </Row>\n            </Form>\n            <div\n                style={{\n                    position: 'absolute',\n                    left: 0,\n                    bottom: 0,\n                    width: '100%',\n                    borderTop: '1px solid #e9e9e9',\n                    padding: '10px 16px',\n                    background: '#fff',\n                    textAlign: 'right',\n                }}\n            >\n                <Button onClick={this.resetField} style={{ marginRight: 8 }}>\n                    Reset\n                </Button>\n                <Button onClick={this.handleSubmit} type=\"primary\">\n                    Submit\n                </Button>\n            </div>\n        </Drawer>;\n\n        return (\n        <Layout style={{ minHeight: '100vh' }}>\n            <Sider\n                collapsible = {false}\n                collapsed={this.state.collapsed}\n                onCollapse={this.onCollapse}\n            >\n                <h2 className=\"logo\">Iris Data Set</h2>\n                <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\n                    <Menu.Item key=\"1\">\n                        <Icon type=\"dot-chart\" />\n                        <span>Report</span>\n                    </Menu.Item>\n                </Menu>\n            </Sider>\n            <Layout>\n                <Header style={{ background: '#13233b', padding: 0 }} >\n                    <h2 className=\"header\">Report</h2>\n                    <div className=\"style-two\"></div>\n                </Header>\n                <Content >\n                    <div className=\"iris-dasboard-example\">\n                        <div className=\"chart-container\">\n                            {AXES.map(yAxis => {\n                                return (\n                                    <div key={yAxis} className=\"chart-row\">\n                                        <Row gutter={50}>\n                                        {AXES.map(xAxis => {\n                                            if (xAxis !== yAxis) {\n                                                const updateFilter = area => {\n                                                    if (!area) {\n                                                        filters[xAxis] = {min: null, max: null};\n                                                        filters[yAxis] = {min: null, max: null};\n                                                        this.setState({filters});\n                                                    } else {\n                                                        const {left, right, top, bottom} = area;\n                                                        filters[xAxis] = {min: left, max: right};\n                                                        filters[yAxis] = {min: bottom, max: top};\n                                                    }\n                                                    this.setState({filters});\n                                                };\n                                                return (\n                                                    <Col span={7} key={xAxis}>\n                                                        <div className=\"form-back\">\n                                                            <XYPlot height={SIZE} width={SIZE} key={`${xAxis}-${yAxis}`}>\n                                                                <MarkSeriesCanvas\n                                                                    data={data.map(d => ({\n                                                                        x: Number(d[xAxis]),\n                                                                        y: Number(d[yAxis]),\n                                                                        color: d.species,\n                                                                        selected: d.selected\n                                                                    }))}\n                                                                    colorType=\"category\"\n                                                                    colorDomain={SPECIES}\n                                                                    colorRange={['#19CDD7', 'red', '#88572C','#f8ed41']}\n                                                                    getOpacity={d => d.selected ? 1 : 0.1}\n                                                                    size={2}\n                                                                />\n                                                                <XAxis title={xAxis} style={{fontSize:'12px'}}/>\n                                                                <YAxis title={yAxis} style={{fontSize:'12px'}}/>\n                                                                <Highlight\n                                                                    drag\n                                                                    onBrush={updateFilter}\n                                                                    onDrag={updateFilter}\n                                                                    onBrushEnd={updateFilter} />\n                                                            </XYPlot>\n                                                        </div>\n                                                    </Col>\n                                                )\n                                            }\n                                        })}\n                                            <Col span={3} style={{display:yAxis!=='sepal length'?'none':'inline'}}>\n                                                <div className=\"setosa-circle\"></div>\n                                                <div className=\"explain-span\">Setosa</div>\n                                                <div className=\"versicolor-circle\"></div>\n                                                <div className=\"explain-span\">Versicolor</div>\n                                                <div className=\"virginica-circle\"></div>\n                                                <div className=\"explain-span\">Virginica</div>\n                                                <div className=\"variable-circle\"></div>\n                                                <div className=\"explain-span\">Variable</div>\n                                            </Col>\n                                            <Col span={3} style={{display:yAxis!=='sepal width'?'none':'inline'}}>\n                                                <Button className='insert-button' type=\"primary\" onClick={this.showDrawer}>\n                                                    <Icon type=\"plus\" /> Insert\n                                                </Button>\n                                            </Col>\n                                            <Col span={3} style={{display:yAxis!=='petal length'?'none':'inline'}}>\n                                                <Button className='insert-button' type=\"primary\" onClick={this.resetData}>\n                                                    <Icon type=\"rollback\" /> Reset\n                                                </Button>\n                                            </Col>\n                                            <Col span={3} style={{display:yAxis!=='petal width'?'none':'inline'}}>\n                                                <Button className='dis-insert-button' type=\"primary\" onClick={this.showDrawer}>\n                                                    <Icon type=\"plus\" /> Insert\n                                                </Button>\n                                            </Col>\n                                            {drawer}\n\n                                        </Row>\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </div>\n                </Content>\n            </Layout>\n        </Layout>\n        );\n    }\n}\n\n\nconst toForm = Form.create()(IrisDashboard);\n\nexport default toForm;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport IrisDashboard from './IrisDashboard'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<IrisDashboard />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}